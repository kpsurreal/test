{"version":3,"sources":["common/client.electron.js"],"names":["__electron","window","addEventListener","getFs","require","remote","fs","top","setTimeout","readFile","path","callback","err","data","getJsonDataByName","name","rtn","code","msg","obj","JSON","parse","undefined","setJsonDataByNames","dataArr","newData","forEach","e","value","writeCallback","writeFile","stringify","Object","assign"],"mappings":"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","file":"client.electron.js","sourcesContent":["// 仅在使用electron打开网页时可用.\n// Author: liuzeyafzy@gmail.com\n// 注意：之前之所以能够支持是因为electron那边的index.html在子页面onload的时候提供了window.require方法\n// 但是现在，已经可以直接使用top.window.require来获取方法了。\n\n// 自定义错误码：\n// 0: 成功\n// 100: 文件失败\n// 200: 内容不匹配\nvar __electron = {};\nwindow.addEventListener('load', function(){\n  __electron.getFs = function(){\n    if (window.require && window.require('electron') &&\n      window.require('electron').remote &&\n      window.require('electron').remote.require('fs')) {\n      __electron.fs = window.require('electron').remote.require('fs');\n      return true;\n    }else if (top.window.require && top.window.require('electron') &&\n      top.window.require('electron').remote &&\n      top.window.require('electron').remote.require('fs')) {\n      __electron.fs = top.window.require('electron').remote.require('fs');\n      return true;\n    }\n    return false;\n  };\n  // 加载时间不好确定，但是采用这样的方式是可以解决问题的。\n  setTimeout(function(){\n    __electron.getFs();\n  }, 100)\n\n  // 读取JSON文件全部，指定文件名、回调处理\n  __electron.readFile = function(path, callback){\n    __electron.fs.readFile(path, 'utf8', (err, data) => {\n      callback(err, data);\n    })\n  }\n\n  // 读取JSON文件指定字段，指定文件名、字段名、回调处理\n  __electron.getJsonDataByName = function(path, name, callback){\n    __electron.readFile(path, (err, data) => {\n      if (err) {\n        let rtn = {\n          code: 101,\n          msg: err.code,\n          data: {}\n        }\n\n        callback(rtn);\n        return;\n      }\n\n      if ('string' == typeof data) {\n        let obj = JSON.parse(data);\n        if (undefined == obj[name]) {\n          let rtn = {\n            code: 201,\n            msg: 'JSON文件中读不到该字段：' + name,\n            data: {}\n          }\n          callback(rtn);\n          return;\n        }else{\n          let rtn = {\n            code: 0,\n            msg: '读取成功',\n            data: obj[name]\n          }\n          callback(rtn);\n          return;\n        }\n      }\n    });\n  }\n\n  // 修改JSON文件，指定文件名、字段名、字段值、回调处理\n  // 顺便支持批量修改好了，字段名和字段值合成一个对象，再以数组的形式聚合\n  __electron.setJsonDataByNames = function(path, dataArr, callback){\n    // 先准备好需要保存的新数据\n    let newData = {};\n    dataArr.forEach((e) => {\n      // let obj = {};\n      newData[e.name] = e.value\n      // newData.push(obj)\n    })\n\n    let writeCallback = (err) => {\n      if (err) {\n        callback({\n          code: 101,\n          msg: err.code,\n          data: {}\n        })\n        return;\n      }\n\n      callback({\n        code: 0,\n        msg: '保存成功',\n        data: {}\n      })\n    };\n\n    __electron.readFile(path, (err, data) => {\n      if (err) {\n        // 读取错误，那么当文件不存在时，新增文件\n        if (err.code === 'ENOENT') {\n          __electron.fs.writeFile(path, JSON.stringify(newData), 'utf8', writeCallback);\n          return;\n        }\n        callback({\n          code: 102,\n          msg: err.code,\n          data: {}\n        });\n        return;\n      }\n\n      // 读取成功，data已经可以使用，覆盖需要修改的数据\n        newData = Object.assign({}, JSON.parse(data), newData);\n        __electron.fs.writeFile(path, JSON.stringify(newData), 'utf8', writeCallback)\n    })\n  }\n}, true);\n"]}